# .local/share/FreeCAD/Macro/dev/myTinyAsm/unveilGlobalPlacement.py
# upon recompute, scan all first level child objects of linked file
# and write their real global placment to a Parameter so it can be read
# from FreeCAD expressions
# (c) Wolfgang Rosner 2024 - wolfagngr@github.com
# License: LGPL 2+
#
# boilerplated from
# https://wiki.freecad.org/Create_a_FeaturePython_object_part_I#Complete_code

# ======================================
#   config
icon_rel_path = "/icons/PartLinkGlobalPlacementGetter.svg"
# parameter_group_name = "Inspect_global_placement"
# parameter_group_name = "GPget" # no trailing _ !

parameter_group_name = "GP" # no trailing _ !
tooltip = "retrieved Global Placement of sub-Object - read only"
# ======================================


import FreeCAD as App
import os
import re
import datetime

# filePath = os.getcwd()
# filePath = os.path.dirname(sys.argv[0])
# https://stackoverflow.com/questions/52778687/nameerror-file-is-not-defined
#       (OMG....)
def dummy(): pass
script_path = (dummy.__code__.co_filename)
filePath = os.path.dirname(script_path)     # (__file__)
# iconPath = filePath + "/icons/myIcon.svg"
# iconPath = filePath + "/icons/myIcon.svg"
iconPath = filePath + icon_rel_path
print ('iconPath:', iconPath)

# https://wiki.freecad.org/FeaturePython_Custom_Properties
def sync_GPParams(obj_svtr, obj_svnd, pgname = parameter_group_name):
    # param List is kept as property of surveilling object
    old_PL = obj_svtr.inspectedSubobjectList

    # .. and has to match subobject List of object under surveillance
    new_PL = list(obj_svnd.getSubObjects())
    new_PL.insert(0, '.')
    if hasattr(obj_svnd, 'Origin'):
        new_PL.insert(1, 'Origin.')

    print ('old_PL', old_PL)
    print ('new_PL', new_PL)
    # return ==~~~~~~~~~~~~~~~~---------------

    # add missing params
    for prm in new_PL:
        pg_prm = pgname + '_' + prm.rstrip('.')
        if not (prm in old_PL):
            print('create param: ' + pg_prm)
            obj_svtr.addProperty("App::PropertyPlacement", pg_prm, pgname, tooltip)
            obj_svtr.setEditorMode(pg_prm, ['ReadOnly'])

    # remove stale params
    for prm in old_PL:
        pg_prm = pgname + '_' + prm.rstrip('.')
        if not (prm in new_PL):
            print('delete param: ' + pg_prm)
            obj_svtr.removeProperty(pg_prm)

    obj_svtr.inspectedSubobjectList = new_PL



def create_uGP(obj_name = 'GPinspector'):
    """
    Object creation method
    """

    obj = App.ActiveDocument.addObject('App::FeaturePython', obj_name)
    GPinspector(obj)

    try:
        target = FreeCADGui.Selection.getSelection()[0]
        obj.inspectedObject = target
        print(f"attached to surveillance of object: <{target.Name}>")
    except:
        print('no valid object selected, leave empty')
        pass

    App.ActiveDocument.recompute()
    return obj

class GPinspector():
    def __init__(self, obj):
        """
        Default constructor
        """
        self.Type = 'GPinspector'
        obj.Proxy = self
        # obj.addProperty('App::PropertyString', 'Description', 'Base', 'Box description')
        obj.addProperty("App::PropertyLink", "inspectedObject", "Base",
            'The object whose subobjects real global placment values shall be retrieved')
        obj.addProperty("App::PropertyStringList", "inspectedSubobjectList", "Base",
            'List of subObjects under surveillance - autogenerated')
        obj.setEditorMode('inspectedSubobjectList', ['ReadOnly'])

    def execute(self, obj):
        """
        Called on document recompute
        """
        print('Recomputing {0:s} ({1:s})'.format(obj.Name, self.Type))
        #
        surveilland = obj.inspectedObject
        if surveilland:
            sync_GPParams(obj, surveilland)
        else:
            print('no object for inspection selected')

